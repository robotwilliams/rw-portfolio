{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///Users/robw/Developer/rw-portfolio/src/lib/markdown.ts"],"sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport { remark } from \"remark\";\nimport html from \"remark-html\";\n\n/**\n * Content Directory Configuration\n *\n * Defines the base directory where all markdown content is stored.\n * This is the root of the markdown-based CMS system.\n */\nconst contentDirectory = path.join(process.cwd(), \"content\");\n\n/**\n * Page Data Interface\n *\n * Defines the structure for page metadata extracted from markdown frontmatter.\n * This interface is flexible to accommodate various frontmatter fields\n * that different pages might have.\n */\nexport interface PageData {\n  title: string; // Page title for SEO and display\n  description: string; // Page description for SEO\n  [key: string]: string | number | boolean | string[]; // Additional frontmatter fields\n}\n\n/**\n * Portfolio Project Interface\n *\n * Defines the complete structure for portfolio project data.\n * This includes both metadata (from frontmatter) and content (from markdown body).\n * All fields are used throughout the portfolio pages for display and filtering.\n */\nexport interface PortfolioProject {\n  // Basic project information\n  title: string; // Project title\n  description: string; // Short project description\n  slug: string; // URL-friendly identifier\n  category: string; // Project category (e.g., \"Web Development\")\n  client: string; // Client name\n  date: string; // Project completion date\n  duration: string; // Project duration (e.g., \"3 months\")\n\n  // Technical information\n  technologies: string[]; // Array of technologies used\n  image: string; // Main project image path\n  gallery?: string[]; // Optional gallery of additional images\n\n  // Links\n  live_url?: string; // Link to live project\n  github_url?: string; // Link to GitHub repository\n\n  // Display options\n  featured: boolean; // Whether to show in featured section\n\n  // Content\n  content: string; // Full markdown content\n}\n\n/**\n * Get Page Data\n *\n * Extracts metadata from a markdown file's frontmatter.\n * This function is used to get page titles, descriptions, and other\n * metadata without loading the full content.\n *\n * @param pageName - The name of the page file (without .md extension)\n * @returns PageData object containing frontmatter metadata\n */\nexport function getPageData(pageName: string): PageData {\n  const fullPath = path.join(contentDirectory, \"pages\", `${pageName}.md`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  const { data } = matter(fileContents);\n\n  return data as PageData;\n}\n\n/**\n * Get Page Content\n *\n * Extracts the markdown content from a page file, excluding frontmatter.\n * This function is used when you need the raw markdown content for\n * processing or conversion to HTML.\n *\n * @param pageName - The name of the page file (without .md extension)\n * @returns Raw markdown content as a string\n */\nexport function getPageContent(pageName: string): string {\n  const fullPath = path.join(contentDirectory, \"pages\", `${pageName}.md`);\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  const { content } = matter(fileContents);\n\n  return content;\n}\n\n/**\n * Get All Portfolio Projects\n *\n * Loads all portfolio project files from the content/portfolio directory\n * and returns them as an array of PortfolioProject objects. Projects are\n * sorted by date (newest first) for consistent display order.\n *\n * This function is used by the work page to display the interactive\n * project grid with Windows 98-style icons. The project data is served\n * through an API route to enable client-side rendering of the project\n * windows system.\n *\n * @returns Array of PortfolioProject objects, sorted by date\n */\nexport function getAllPortfolioProjects(): PortfolioProject[] {\n  const portfolioDirectory = path.join(contentDirectory, \"portfolio\");\n  const fileNames = fs.readdirSync(portfolioDirectory);\n\n  const allProjectsData = fileNames\n    .filter((fileName) => fileName.endsWith(\".md\"))\n    .map((fileName) => {\n      const fullPath = path.join(portfolioDirectory, fileName);\n      const fileContents = fs.readFileSync(fullPath, \"utf8\");\n      const { data, content } = matter(fileContents);\n\n      return {\n        slug: data.slug || fileName.replace(/\\.md$/, \"\"), // Use frontmatter slug or fallback to filename\n        content,\n        ...data,\n      } as PortfolioProject;\n    })\n    .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n\n  return allProjectsData;\n}\n\n/**\n * Get Portfolio Project by Slug\n *\n * Loads a specific portfolio project by its slug (filename without extension).\n * This function is used by the project window system to display detailed\n * project information when users click on project icons in the work grid.\n *\n * @param slug - The project slug (filename without .md extension)\n * @returns PortfolioProject object or null if not found\n */\nexport function getPortfolioProject(slug: string): PortfolioProject | null {\n  try {\n    const fullPath = path.join(contentDirectory, \"portfolio\", `${slug}.md`);\n    const fileContents = fs.readFileSync(fullPath, \"utf8\");\n    const { data, content } = matter(fileContents);\n\n    return {\n      slug,\n      content,\n      ...data,\n    } as PortfolioProject;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Get Featured Projects\n *\n * Filters the portfolio projects to return only those marked as featured.\n * This function is used by the home page to display a curated selection\n * of the best projects.\n *\n * @returns Array of featured PortfolioProject objects\n */\nexport function getFeaturedProjects(): PortfolioProject[] {\n  const allProjects = getAllPortfolioProjects();\n  return allProjects.filter((project) => project.featured);\n}\n\n/**\n * Convert Markdown to HTML\n *\n * Converts markdown content to HTML using the remark processor.\n * This function is used by API routes to serve pre-rendered HTML\n * content to the frontend components, particularly for project windows\n * that display detailed project content within the Windows 98 interface.\n *\n * The remark processor is configured to handle standard markdown\n * syntax and convert it to clean HTML that can be safely rendered\n * in the browser with Windows 98 styling.\n *\n * @param markdown - Raw markdown content as a string\n * @returns Promise that resolves to HTML string\n */\nexport async function markdownToHtml(markdown: string): Promise<string> {\n  const result = await remark().use(html).process(markdown);\n  return result.toString();\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA;;;;;CAKC,GACD,MAAM,mBAAmB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AA0D3C,SAAS,YAAY,QAAgB;IAC1C,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,kBAAkB,SAAS,GAAG,SAAS,GAAG,CAAC;IACtE,MAAM,eAAe,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;IAC/C,MAAM,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,yIAAA,CAAA,UAAM,AAAD,EAAE;IAExB,OAAO;AACT;AAYO,SAAS,eAAe,QAAgB;IAC7C,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,kBAAkB,SAAS,GAAG,SAAS,GAAG,CAAC;IACtE,MAAM,eAAe,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;IAC/C,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,yIAAA,CAAA,UAAM,AAAD,EAAE;IAE3B,OAAO;AACT;AAgBO,SAAS;IACd,MAAM,qBAAqB,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,kBAAkB;IACvD,MAAM,YAAY,6FAAA,CAAA,UAAE,CAAC,WAAW,CAAC;IAEjC,MAAM,kBAAkB,UACrB,MAAM,CAAC,CAAC,WAAa,SAAS,QAAQ,CAAC,QACvC,GAAG,CAAC,CAAC;QACJ,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,oBAAoB;QAC/C,MAAM,eAAe,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;QAC/C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,yIAAA,CAAA,UAAM,AAAD,EAAE;QAEjC,OAAO;YACL,MAAM,KAAK,IAAI,IAAI,SAAS,OAAO,CAAC,SAAS;YAC7C;YACA,GAAG,IAAI;QACT;IACF,GACC,IAAI,CAAC,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,IAAI,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,IAAI,EAAE,OAAO;IAEvE,OAAO;AACT;AAYO,SAAS,oBAAoB,IAAY;IAC9C,IAAI;QACF,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,kBAAkB,aAAa,GAAG,KAAK,GAAG,CAAC;QACtE,MAAM,eAAe,6FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;QAC/C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,yIAAA,CAAA,UAAM,AAAD,EAAE;QAEjC,OAAO;YACL;YACA;YACA,GAAG,IAAI;QACT;IACF,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAWO,SAAS;IACd,MAAM,cAAc;IACpB,OAAO,YAAY,MAAM,CAAC,CAAC,UAAY,QAAQ,QAAQ;AACzD;AAiBO,eAAe,eAAe,QAAgB;IACnD,MAAM,SAAS,MAAM,CAAA,GAAA,iIAAA,CAAA,SAAM,AAAD,IAAI,GAAG,CAAC,gJAAA,CAAA,UAAI,EAAE,OAAO,CAAC;IAChD,OAAO,OAAO,QAAQ;AACxB","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///Users/robw/Developer/rw-portfolio/src/app/api/content/projects/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { getAllPortfolioProjects } from \"@/lib/markdown\";\n\n/**\n * GET /api/content/projects\n *\n * Returns all portfolio projects as JSON for client-side consumption.\n * This endpoint is used by the work page to display the interactive\n * project grid with Windows 98-style icons and window management.\n *\n * The endpoint:\n * 1. Reads all project markdown files from the content/portfolio directory\n * 2. Extracts frontmatter metadata and content for each project\n * 3. Returns structured project data for the work page grid\n *\n * This enables the work page to display project icons that users can\n * click to open detailed project windows within the desktop environment.\n */\nexport async function GET() {\n  try {\n    const projects = getAllPortfolioProjects();\n\n    return NextResponse.json({\n      success: true,\n      data: projects,\n    });\n  } catch (error) {\n    console.error(\"Error fetching projects:\", error);\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to fetch projects\",\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAiBO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,CAAA,GAAA,wHAAA,CAAA,0BAAuB,AAAD;QAEvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAE1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}